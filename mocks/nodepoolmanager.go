// Code generated by MockGen. DO NOT EDIT.
// Source: ./nodepoolmanager/nodepoolmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	nodepoolmanager "github.com/theredrad/kubescaler/nodepoolmanager"
	reflect "reflect"
)

// MockNodePoolProvider is a mock of Provider interface
type MockNodePoolProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodePoolProviderMockRecorder
}

// MockNodePoolProviderMockRecorder is the mock recorder for MockNodePoolProvider
type MockNodePoolProviderMockRecorder struct {
	mock *MockNodePoolProvider
}

// NewMockNodePoolProvider creates a new mock instance
func NewMockNodePoolProvider(ctrl *gomock.Controller) *MockNodePoolProvider {
	mock := &MockNodePoolProvider{ctrl: ctrl}
	mock.recorder = &MockNodePoolProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodePoolProvider) EXPECT() *MockNodePoolProviderMockRecorder {
	return m.recorder
}

// ResizeNode mocks base method
func (m *MockNodePoolProvider) ResizeNode(ctx context.Context, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeNode", ctx, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeNode indicates an expected call of ResizeNode
func (mr *MockNodePoolProviderMockRecorder) ResizeNode(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeNode", reflect.TypeOf((*MockNodePoolProvider)(nil).ResizeNode), ctx, count)
}

// DeleteNodes mocks base method
func (m *MockNodePoolProvider) DeleteNodes(ctx context.Context, IDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodes", ctx, IDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodes indicates an expected call of DeleteNodes
func (mr *MockNodePoolProviderMockRecorder) DeleteNodes(ctx, IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodes", reflect.TypeOf((*MockNodePoolProvider)(nil).DeleteNodes), ctx, IDs)
}

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDriver) Connect(config interface{}) (nodepoolmanager.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", config)
	ret0, _ := ret[0].(nodepoolmanager.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockDriverMockRecorder) Connect(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDriver)(nil).Connect), config)
}
